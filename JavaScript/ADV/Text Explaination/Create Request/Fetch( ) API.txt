fetch() API 
------------
The fetch() API is a modern, more powerful, and flexible alternative to the XMLHttpRequest object for making HTTP requests in JavaScript. 
Introduced in ES6, it provides a cleaner, more concise way to interact with servers using promises, making it easier to handle asynchronous requests. 
Unlike XMLHttpRequest, fetch() uses promises to simplify asynchronous workflows and avoid callback hell.

Key Features of fetch() API:
    - Promise-based: fetch() returns a promise, which resolves when the request completes successfully or rejects when there is an error.
    - Simpler syntax: Compared to XMLHttpRequest, fetch() has a much cleaner and more intuitive syntax
    - Supports modern JavaScript features: fetch() works well with async/await for even cleaner asynchronous code.
    - Response types: fetch() supports many types of response formats (JSON, text, Blob, etc.).

Basic Syntax of fetch()
    - The fetch() method takes two main arguments:
        1. URL: The endpoint or resource you want to access.
        2. Options (optional): An object that configures things like the HTTP method, headers, body, etc.
    - fetch(url, options)
        .then(response => {
            // Handle the response object
        })
        .catch(error => {
            // Handle any error that occurred
        });

Response Object:
    - The response object returned by fetch() has several useful properties and methods:
        - response.ok: A Boolean indicating whether the request was successful (status code 200â€“299).
        - response.status: The HTTP status code of the response (e.g., 200 for success, 404 for not found).
        - response.json(): A method to parse the response body as JSON.
        - response.text(): A method to parse the response body as plain text.
        - response.blob(): A method to parse the response body as binary Blob data (useful for downloading files or images).
