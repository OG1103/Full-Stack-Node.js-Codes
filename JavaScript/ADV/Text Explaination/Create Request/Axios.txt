What is Axios?
--------------
Axios is a JavaScript library that makes it easier to send HTTP requests from the front end (browser or client-side) to the back end (server-side) and receive responses. It works as a bridge between your web app and the server, enabling you to:
- Send requests: You can send data to the server (like submitting a form, uploading files, or triggering actions).
- Receive responses: You can fetch data from the server (like getting user data, receiving JSON, or retrieving files).

In simpler terms, Axios helps you communicate with a server by making HTTP requests, such as:
    - In simpler terms, Axios helps you communicate with a server by making HTTP requests, such as:
    - POST: To send data to the server.
    - PUT: To update data on the server.
    - DELETE: To delete data on the server.

What Does Axios Do?
    - Axios is a client-side tool that allows you to perform tasks like fetching data, submitting forms, or handling API requests, all asynchronously (i.e., without blocking the web page).
    - It simplifies working with HTTP requests by providing a cleaner syntax than the traditional XMLHttpRequest or even the native fetch() API.

Example:
Here’s a simple example of using Axios to make a GET request to retrieve data from a server:
    - axios.get('https://jsonplaceholder.typicode.com/posts/1')
    .then(response => console.log(response.data))  // Handle successful response
    .catch(error => console.error('Error:', error));  // Handle error

Features of Axios:
    1. Promise-Based:
        - Axios is built on promises, which allows you to handle asynchronous HTTP requests easily. Instead of using callbacks (like in XMLHttpRequest), promises let you chain .then() for handling responses and .catch() for errors.
    2. Automatic JSON Parsing:
        - Axios automatically converts the JSON data it receives from the server into a JavaScript object. You don’t need to manually call .json() like with fetch().
        // Response is automatically parsed as JSON
        axios.get('https://jsonplaceholder.typicode.com/posts/1')
            .then(response => console.log(response.data));  // response.data is already a parsed object
    3. Error Handling:
        - Axios automatically throws an error for non-2xx HTTP status codes (like 404 or 500). This simplifies error handling since you don’t need to manually check for response.ok.
    4. Request Interceptors:
        - Axios allows you to intercept requests and responses before they are handled. This is useful for tasks like adding authentication tokens to every request or logging requests/responses globally.
    5.Request Cancelation:
        -  Axios provides an easy way to cancel ongoing requests using CancelToken. This is useful if you want to stop a request before it completes, like when navigating away from a page.
    6. Timeouts:
        - Axios has built-in support for timeouts. If a request takes too long, you can automatically cancel it after a certain period.
    7. Simplified File Uploads:
        - Axios simplifies file uploads with support for FormData. You can easily send files (like images, PDFs, etc.) to a server.
    8. Cross-Site Requests:
        - Axios automatically sends credentials (like cookies) for cross-origin requests, making it easier to handle authentication when interacting with different domains.

Response Object in axios:
    - console.log(response.data);  // The actual data from the server
    - console.log(response.status);  // HTTP response status code (e.g., 200)
    - console.log(response.statusText);  // Status message (e.g., "OK")
    - console.log(response.headers);  // Object containing response headers
    - console.log(response.config);  // The config used for the request
    - console.log(response.request);  // The original request object
Error Object in axios: 
    - console.log(error.message);  // A string representing the error message.


When to Use Axios:
    - Use Axios if you need automatic JSON parsing, better error handling, interceptors, or request cancelation.
    - Ideal for larger applications where handling authentication, complex HTTP requests, or file uploads is necessary.