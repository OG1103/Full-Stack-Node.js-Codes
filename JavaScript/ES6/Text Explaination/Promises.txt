Promises in JavaScript ES6:
    - Promises are a way to handle asynchronous operations in JavaScript. A Promise is an object that represents the eventual completion (or failure) of an asynchronous operation 
     and its resulting value. Promises help avoid callback hell and make asynchronous code easier to read and maintain.
    - Promises in JavaScript are asynchronous, meaning they allow code to execute in the background without blocking the main thread

1. Basic Concept of a Promise
    - A Promise in JavaScript is like a placeholder for a value that will be available at some point in the future. It has three states:
        - Pending: The promise is still executing and has not been fulfilled or rejected.
        - Fulfilled: The operation completed successfully, and the promise now has a value.
        - Rejected: The operation failed, and the promise has a reason for the failure.

2. Creating a Promise
    - You can create a promise using the new Promise() constructor. The promise constructor takes a function as an argument, which has two parameters: resolve and reject.
    - Check Syntax EXAMPLE

3. Using Promises
    - After creating a promise, you can handle its result using .then(), .catch(), and .finally().
    - .then(onFulfilled()): This method is used to handle the promise when it is resolved. I can make the function inside as arrow functions
    - .catch(onRejected): This method is used to handle promise rejection (failure).
    - .finally(): This method is called after the promise is settled, whether fulfilled or rejected.

4. Chaining Promises
    - One of the powerful features of promises is chaining. You can chain multiple .then() calls to perform operations sequentially.

5. Promise Combinators
    - a) Promise.all()
        - Promise.all() takes an array of promises and returns a single promise. This returned promise resolves when all the promises in the array have resolved.
        - If one promise rejects then the entire promise.all(rejects)  and the rejection reason (the error from the rejected promise) is returned.
    - b) Promise.race()
        - Promise.race() returns a promise that resolves or rejects as soon as one of the promises in the array resolves or rejects.
    - c) Promise.allSettled() 
        - Promise.allSettled() returns a promise that resolves when all the given promises have either resolved or rejected. The result is an array of objects, each describing the outcome of each promise.

Summary:
    - Promise states: pending, fulfilled, rejected.
    - Methods:
        - .then(): for handling fulfillment.
        - .catch(): for handling rejection.
        - .finally(): for cleanup after either fulfillment or rejection.
    - Async/Await: Simplifies working with promises, makes the code look synchronous.
