The Express app object is the core of an Express application. It represents your application and is used to define routes, middleware, and various settings.

Key Features of the Express App Object:
Creating the App Object: You create an Express app object by calling the express() function:
{
    import express from "express";
    const app = express();
}

This app object provides the interface to apply:

Routes (endpoints)
Middleware functions
Settings (e.g., port, view engine)
Application-wide configurations

app.httpmethod()
------------------
Defining Routes: The app object is used to define different routes directly on your application.
 Routes respond to HTTP requests and handle client-server interactions.
 example :
 {
    app.httpmethod('/test_endpoint', Middlewares, controllerfunction)
 }

 What is app.use()?
 --------------------
The app.use() function is used to add middleware to your Express application. Middleware functions can be used to modify the request or response, 
end the request-response cycle, or call next() to pass control to the next middleware function.
When you call app.use(), Express will "run" the middleware for every incoming request. If you specify a path prefix, it will only apply the middleware for requests that start with that prefix.


    - Global Middleware: Middleware functions added with app.use() are applied globally to all routes:
        app.use(express.json()); // executes Middleware to parse JSON request bodies in all routes, so all routes will execute this middleware

    - Path-Specific Middleware: You can also apply middleware to specific paths. For example, the middleware function will only be executed for routes that start with /api.
        app.use('/api', someMiddlewareFunction); 
    
    - Using app.use() with Routers from Separate Files:
        - Express routers (express.Router()) are middleware too. When you define a router in a separate file and use app.use() to add it to your app, you're mounting that router as middleware.
        - When you run the router middleware function by using app.use(router), you are making the endpoints defined in that specific router accessible.
        - How these endpoints are accessed depends on how you mount the router—either with a prefix, which prepends the prefix to all routes in that specific router, or without a prefix, which makes the routes globally accessible.        
        
        - How to Set Up Routers with the router object and using app.use():
            - Router Setup in a Separate File:
                - Typically, you create a router in a separate file (e.g., userRoutes.js) that contains routes related to a specific resource, such as users.(const router=express.Router())
                - use the router object to declare endpoints and export the router object
            - Using app.use() to Mount the Router:
                - import the router and mount it using app.use('/prefix',imported router).
                - When there’s a prefix, it applies that prefix to all the routes defined in the router.
                - EX:When you use app.use('/users', userRoutes);, the /users prefix is applied to all routes defined in userRoutes. This means that to access any endpoint in userRoutes, you will need to prefix it with /users in the URL.
            - Using app.use() Without a Prefix:
                - If you don’t specify a prefix in app.use(), the routes in the imported router will be applied globally, meaning the paths will be accessible directly.
                - Ex: When you use app.use(userRoutes); without a prefix, all the routes defined inside userRoutes will be applied globally. This means that the routes in userRoutes will be accessible directly without any additional path prefix.

what is app.listen()?
---------------------
The app.listen() method is used to start the server and have it listen for incoming connections on a specified port and host. 
It’s typically the last method you call when setting up your Express application because it launches the server to handle requests.

Syntax:
    - app.listen(port, [hostname], [backlog], [callback])
EXPLAINATION:
    - port (required): The port number that the server should listen on (e.g., 3000, 8000). This is where clients (browsers or API consumers) will send their requests.
    - hostname (optional): The IP address or domain name the server should listen to (e.g., 'localhost'). If omitted, it defaults to localhost or 0.0.0.0 which listens on all available network interfaces. must be a valid IP address or a domain name that resolves to an IP address.
    - backlog (optional): The maximum length of the queue of pending connections. It's rarely used.
    - callback (optional): A function that runs once the server starts successfully. It's often used to log a message to the console indicating that the server is running.
