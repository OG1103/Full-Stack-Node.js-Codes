This document explains the expected structure of the request (req), including the parameters it requires, and the structure of the response (res). 
It also provides details on what to pass inside the res.json({}) method.

1. Request (req):
The req (request) object contains data that the client sends to the server. The request may include the following:
    1. URL Parameters (req.params): Variables extracted from the URL. Example:
        - req.params.id would capture id if the URL is /api/items/:id
    
    2. Query Parameters (req.query): Optional parameters sent via the query string in the URL. Example:
        - /api/items?category=books → req.query.category would equal "books".
    
    3. Body Parameters (req.body): Data sent in the request body, often used in POST/PUT requests. Typically JSON or form data.
        - Example: req.body = { "name": "John", "age": 30 }
            - to access a certain object from the body  we can do ex: const Name = req.body.name.
            - This works because req.body is an object, so you can access any value by using its corresponding key.

            - Alternatively, you can use object destructuring to extract multiple values from req.body in one step. For instance, you can create variables for name and age like this:
                    - const { name, age } = req.body;
                - This approach allows you to directly create variables for specific attributes from the req.body object, simplifying the process of accessing multiple values at once.
                - when using object destructuring, the variable names must match the key names in req.body exactly.
                    - For example, if req.body looks like this:
                        - {"name": "John","age": 30}
                    - You need to destructure it with matching key names:
                        - const { name, age } = req.body;
                
                - However, if you want to use different variable names, you can alias them using a colon : to rename the variables during destructuring. Here’s how:
                    - const { name: userName, age: userAge } = req.body;
                    - userName will contain the value of req.body.name
                    - userAge will contain the value of req.body.age
    
    4. Headers (req.headers): Metadata sent with the request. Useful for authentication (e.g., API keys, tokens).
        - Example: req.headers.authorization
    
2. Response (res)
The res (response) object is used to send data back to the client. You can set the status and body of the response.
    1 - res.status(code):
        - This sets the HTTP status code of the response. Common codes:
            - 200 OK: Success.
            - 201 Created: Resource was successfully created.
            - 400 Bad Request: The client sent invalid data.
            - 401 Unauthorized: Authentication is required.
            - 404 Not Found: Resource not found.
            - 500 Internal Server Error: General server error.
        
    2 - res.json({}):
        - This method sends a JSON response to the client. You can pass a JSON object that will be serialized and returned.
        - When calling res.json(), you pass a JavaScript object (or array) with key-value pairs that represent the response data. Here's an example of what to include:
            - status: A status message indicating success or failure.
                - Example: status: "success" or status: "error"
            - message (optional): A string providing more details about the result.
                - Example: message: "Data retrieved successfully" or message: "Invalid input"
            - data: The actual data or payload being returned, which could be an object, an array, or null (if no data is returned).
                - Example: data: { "id": 1, "name": "John Doe" } or data: []
            - errors (optional): An array of error messages, usually when validation fails or something goes wrong.
                - Example: errors: [{ "field": "name", "message": "Name is required" }]
                
    - Example Response Object in backend :
        - res.status(200).json({
            "status": "success",
            "message": "Item retrieved successfully",
            "data": {
                "id": "123",
                "name": "Book Title",
                "category": "books"
            }
        })
    

Summary:
    1 - Request (req): Contains params, query, body, and headers to send data from the client to the server.
    2 - Response (res): Use res.status(code) to set the HTTP status code and res.json({}) to return JSON data to the client.
    3 - Inside res.json({}): Pass status, message, data, and errors as necessary to communicate the result of the API call.
