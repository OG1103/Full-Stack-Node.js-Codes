What is it?
-----------
    - The joi library in Node.js is a powerful schema validation library used to define and validate the structure of JavaScript objects
    - particularly useful when working with request payloads, forms, or any data that needs to be validated. joi ensures that the data you're working with conforms to a specified structure, types, and rules, improving the reliability and security of your application.

Key Features of Joi:
--------------------
    - Schema-based validation: Joi allows you to create schemas for objects, arrays, numbers, strings, dates, and other types.
    - Flexible and powerful: Joi supports complex validation rules such as ranges, regex patterns, dependencies between fields, and much more.
    - Error handling: Joi provides detailed error messages when validation fails, which helps in debugging.
    - Integration: It can easily be integrated into Express.js applications for validating request data like body, query parameters, or headers.

Installation:
-------------
npm install joi

ValidateMethod:
---------------
// Validate data
const result1 = schema.validate(Data);

// Notes on `validate()` method:
// - `validate()` returns an object containing:
//   1. `value`: The validated object. It contains all the properties that passed validation, and defaults are applied if any were defined in the schema. This field is returned regardless of validation success or failure.
//   2. `error`: The error object. It exists only if the validation failed and contains detailed information about the validation errors. If validation succeeds, this field is `undefined`.

Key Points
-----------
    1. Field Names:
        - The keys (field names) in the data object must exactly match the field names in the schema, including case sensitivity.
        - For example, if your schema defines a field named username, the data object passed to the schema to be validated must also have a field named username. 
          If the data object has a field Username or USERNAME, it will not be validated correctly.
    2. Case Sensitivity:
        - Field names are case-sensitive. This means username and Username are considered different in Joi validation.
        - If the case doesnâ€™t match, Joi will not validate that field and will ignore it unless you handle unknown fields with an option like { stripUnknown: true } or { allowUnknown: true }.
    
    when using req.body in Express and passing it to the Joi validate method, the fields in req.body must match the fields defined in the Joi schema, including the case sensitivity and field names.

Usage In express:
-----------------
- Using the same field names and case in your Joi schema as in your MongoDB schema is considered best practice
- Body Validation (req.body): Use req.body with Joi to validate form data or JSON in POST/PUT requests.
- Query Validation (req.query): Validate query parameters in GET requests to ensure correct filters or options.
- Parameter Validation (req.params): Validate route parameters like IDs to ensure they meet the expected format (e.g., integers).