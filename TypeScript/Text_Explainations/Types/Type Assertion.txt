What are Type Assertions in TypeScript?
-----------------------------------------
- Type assertions in TypeScript allow you to tell the compiler that you know more about the type of a value than TypeScript can infer on its own. 
- They are a way to override or narrow down TypeScriptâ€™s type inference when the compiler cannot determine the type correctly, but you are sure of the type based on the context.
- Type assertions do not perform any actual type conversion or runtime checks. They are purely for compile-time type checking and have no impact on the emitted JavaScript.

Why Use Type Assertions?
------------------------
- TypeScript sometimes cannot infer the exact type of a variable, especially when dealing with dynamic data (e.g., data coming from external APIs, DOM elements.
- Type assertions allow you to specify the type that you know to be correct, which helps avoid type errors during development.

Syntax of Type Assertions
-------------------------
There are two ways to write a type assertion in TypeScript:
    1. Using the as keyword (most commonly used):
        - let someValue: unknown = "Hello, TypeScript!";
          let stringLength: number = (someValue as string).length;
    2. Using angle-bracket notation (not allowed in .tsx files, used for React):
        - let someValue: any = "Hello, TypeScript!";
          let stringLength: number = (<string>someValue).length;

Key Scenarios for Type Assertions
---------------------------------
    1. When Dealing with any or unknown Types: 
        - If you are working with data of type any or unknown (e.g., data from external sources), TypeScript cannot infer the exact type, so you can assert it yourself.

    2. When Narrowing Down Union Types: 
        - If a variable has a union type (multiple types), and you know it should be treated as a specific type at a particular point, you can use type assertions.
        - EX: let value: string | number = "Hello";
              let stringLength: number = (value as string).length; // Treat 'value' as a string

    3. When Working with DOM Elements:
        - The DOM API often returns elements of type HTMLElement | null, and you may need to assert that you are working with a more specific element type (e.g., HTMLCanvasElement).
        - EX: let myCanvas = document.getElementById("canvas") as HTMLCanvasElement;

    4. Type Assertions Are Not Type Casting:
        - Type assertions are different from type casting in other languages. They do not change the underlying data type at runtime; 
        - they simply inform the TypeScript compiler of the expected type for compile-time checks.
        - ex: let numOrStr: any = "123";
              let numberValue = numOrStr as number; // TypeScript won't enforce a runtime conversion

Summary:
--------
- Type assertions in TypeScript allow you to manually specify the type of a value when TypeScript is unable to infer it accurately.
- They are written using either the as keyword or angle-bracket notation.
- Type assertions help you work with any, unknown, DOM elements, and union types more effectively.
- They do not perform actual type conversions but inform TypeScript for compile-time checks.
