What is TypeScript?
-------------------
TypeScript is a superset of JavaScript that adds static typing to the language. 
TypeScript builds on top of JavaScript by adding types (e.g., string, number, boolean) that help developers catch errors at compile time rather than runtime, making code more predictable and easier to manage.
TypeScript code is transpiled (converted) into JavaScript, which can then be run in any environment that supports JavaScript (browsers, Node.js, etc.).

Key Features of TypeScript:
---------------------------
    1. Static Typing:
        - You can declare the type of a variable (e.g., string, number, boolean), allowing the compiler to catch errors before the code runs.
    2. Object-Oriented Programming Support:
        - TypeScript supports concepts like classes, interfaces, and inheritance, making it more suited for large, object-oriented projects.
    3. Type Inference:
        -  Even if you don't explicitly declare the type of a variable, TypeScript can often infer it from the context.
    4. Modern JavaScript Features:
        -  TypeScript supports the latest JavaScript features (e.g., ES6/ES7 features) and transpiles them into older versions of JavaScript for backward compatibility.


Difference Between JavaScript and TypeScript:
---------------------------------------------

  Feature                    | JavaScript                                                  | TypeScript
  --------------------------------------------------------------------------------------------------------------------------------------------
  Typing                     | Dynamically typed (types are checked at runtime)            | Statically typed (types are checked at compile time)
  Compilation                | Interpreted directly in browsers or Node.js                 | Needs to be transpiled into JavaScript
  Error Detection            | Errors are caught at runtime                                | Errors are caught at compile time
  Object-Oriented Features   | Limited support (e.g., ES6 classes)                         | Strong support for OOP concepts like interfaces and generics
  Syntax                     | Lightweight and flexible                                    | More structured, with optional types and annotations
  Tooling Support            | Basic auto-completion, limited type-checking                | Advanced IDE support, auto-completion, type checking
  Use Cases                  | Suited for small projects and prototypes                    | Ideal for large, scalable applications


