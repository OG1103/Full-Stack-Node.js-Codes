What is React?
--------------
- React is an open source JS Library for building user interfaces
- Not a framework and focus on UI
- In React, we write HTML-like syntax in JSX (JavaScript XML), not pure HTML. JSX allows us to embed HTML-like elements directly within JavaScript code, which React then transforms into actual HTML when rendering components in the browser.

Why React?
-----------
=> React has a component based architecture(lets you break down ur application into small encapsulated parts, which then can be composed to make more comlex UIS)
    => Components are reusable code ex buttons ..

=> React is declarative
    => Tell React what you want and react with its React DOM Library will build the actual UI. (This is declarative paradigm).
    EX: You tell an artist to draw you a picture of something but you don't tell him how to draw it. 

To start a React Project:
-------------------------
    - Go to directory where I wanna create the project
    - Create rext Project
    - npx create-react-app <nameofyourapp>
    - install react router
    - Edit the src/.app.js file to create your own UI
    

Folders:
--------
=> Public:
    - favicon.ico: icon that shows on the tab. has to be named as that.
    
    - index.html: 
        - Head: Include metadata and the declaration of favicon.ico
        - Body: includes a single element: an empty div element of id=root. Which is where my react components will be mounted on. 
   
    - manifest.json:
        - Purpose: Defines metadata for Progressive Web Apps (PWAs) or web apps.
            App Information: Provides details like app name, short name, and description.
            Icons: Specifies the icons to be used when the app is installed on the home screen.
            Theme and Background Colors: Defines colors for the app's theme and splash screen background.
            Display Mode: Controls how the app will appear (e.g., standalone, fullscreen, or browser).
            Start URL: The URL that the app launches when opened from the home screen.
            Orientation: Defines the default screen orientation (portrait or landscape).
            Related Applications: Optionally links to native apps in app stores for the same service.
    
    - Robots.txt: Controls how search engine crawlers interact with your site

=> src:
    - App.js:
       - A component that serves as the main entry componenet for the React application.
       - Typically contains nested components that make up the structure of the app.
       - Can define routes (if using React Router) to map different pages (or views) to components.
       - Often includes common layout elements like headers, footers, or navigation bars.
       - This file is crucial in structuring the app and managing component rendering, routing, and global states.

    - App.css:
       - Contains the global styles.
       - While specific component styles are usually placed in their respective CSS files, App.css can hold shared styles (like themes, resets, or base layouts) that will be reused across multiple components.
       - Defines the styling rules applied across the components used in App.js.
       - Can include CSS classes that can be reused in nested components.
       - But usually contains themes and colors that will be used across all componenets 
       - Typically used to style elements that are part of the main application layout, such as headers, footers, or specific components within App.js.

    - App.test.js:
       - Contains test cases for the App component, typically using Jest or React Testing Library.
       - Ensures that the App component and its logic render correctly.
       - Runs unit tests or snapshot tests to verify UI and functionality.

    - index.js: 
       - The entry point of the React application where the app is initialized.
       - Creates a root DOM element and renders the entire application inside that element.
       - Calls ReactDOM.render() or ReactDOM.createRoot() to render the App component into the root element.

    - index.css:
       - Contains global CSS styles that apply across the entire application.
       - Can define default styles for HTML elements (e.g., body, headers, buttons).
       - Acts as a base stylesheet that other component-specific styles may build upon.
    
    -reportWebVitals.js: 
       - Optional file in React apps used to measure and report performance metrics.
       - Provides insights into the app's load speed, responsiveness, and overall user experience.
       - Utilizes web-vitals library to track metrics like Largest Contentful Paint (LCP), First Input Delay (FID), and Cumulative Layout Shift (CLS).
       - Can be used to send performance data to analytics services or log it for debugging.
       - Helps optimize performance by monitoring real-world metrics.
    
    - Usually we use libraries to handle css. However an index.css file is usually used to apply a wide used style on the body of the page.

//Install ES7+ React/Redux/React-Native snippets Extension
//Type rafce and press Tab to generate a React functional component with an export.
//This extension provides a wide range of useful snippets for quickly generating boilerplate React code, including components, hooks, prop types, and more.