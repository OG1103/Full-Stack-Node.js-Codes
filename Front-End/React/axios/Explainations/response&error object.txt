try{
    const response = await axios.method(url,data)
}
catch(error){

}
NOTE:
    - In the case of an Axios request like const response = await axios.method(url, data), the resolved value is an Axios response object. 
    - This object contains information about the HTTP response, including the data returned by the server.
    - If an error occurs it is passed by in the catch
    - here are what the 2 objects represent (resolved value and rejected value) from the axios.method() promise and what parts of the server response(success/failure) i can access:

1- Response object in axios (from the await axios.method) (retrieving a response from backend endpoints):
    1- response.data:
        - This contains the data sent by the server in response to your request.
        - Usually, this is the JSON object returned by your API.
        - and it can represent either a successful or an error response, to check for which one we usually check response.status
    2- response.status:
        - This is the HTTP status code returned by the server (e.g., 200 for a successful request, 404 for not found, 500 for a server error).
    3- response.statusText:
        - This is the status message returned by the server, typically a short description of the status code (e.g., "OK" for 200, "Not Found" for 404).
    4- response.headers:
        - This contains the response headers sent back from the server.
    5. response.config:
        - This is the Axios configuration object that was used to make the request. It includes settings such as the request URL, method, headers, etc.
    6. response.request:
        - This is the request object that was made, providing details about the request itself.

2- Error Object in Axios (from the catch block when a request fails):
    - error.response:
        - This contains the response object sent back by the server, but only if the server responded with an error status code (e.g., 4xx, 5xx)
        - The structure of error.response is similar to a successful Axios response object (response.data, response.status, etc.).
        - Keys under error.response:
            - error.response.data: The data sent by the server (often contains the error message or error details).
            - error.response.status: The HTTP status code (e.g., 404, 500) returned by the server.
            - error.response.headers: The headers sent back by the server.
    - error.request:
        - This contains the request object that was made but no response was received.
        - This typically happens in cases of network issues, timeouts, or if the server did not respond.
    - error.message:
        - This is a general message about what went wrong, such as "Network Error", "Request failed with status code 500", or any other description of the error.
        - It's useful for logging or displaying a basic error message to the user.
    - error.isAxiosError:
        - This is a boolean flag (true or false) that indicates whether the error was generated by Axios. This can be useful for distinguishing Axios errors from other errors in your application.




